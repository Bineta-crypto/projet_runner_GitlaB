image: docker:latest  # Utiliser une image Docker qui contient Docker

services:
  - docker:dind  # Activer le service Docker-in-Docker

stages:
  - build
  - test
  - build_image
  - deploy
variables:
  DOCKER_DRIVER: overlay2
  CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE 
  #CI_PROJECT_PATH: CI_PROJECT_PATH
  CI_REGISTRY_USER: $CI_REGISTRY_USER
  CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD

build_application:
  image: node:14  # Utiliser l'image Node.js pour le build
  stage: build
  script:
    - echo "Building the application"
    - npm install
    - npm install --save-dev babel-loader @babel/core @babel/preset-env
    - npm run build
  tags:
    - runner1
 
  artifacts:
    paths:
      - dist/

test_application:
  image: node:14  # Utiliser l'image Node.js pour les tests
  stage: test
  script:
    - echo "Installing dependencies"
    - npm install
    - echo "Running tests"
    - npm test
  tags:
    - runner1

build_image:
  stage: build_image
  script:
    - docker info  # Vérifier que Docker est installé et fonctionnel
    - docker buildx create --use  # Créer et utiliser un builder avec Buildx
    - docker buildx inspect --bootstrap  # Assurer que Buildx est prêt
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY_IMAGE"
    #registry.gitlab.com/username/projectname
    #- docker buildx build --platform linux/amd64,linux/arm64 --push -t registry.gitlab.com/etude/tmp:latest .
    - docker buildx build --platform linux/amd64,linux/arm64 --push -t registry.gitlab.com/binta9619/dl:latest .

  # Construire et pousser l'image avec buildx
  tags:
   - runner-docker
  only:
    - main

deploy_application:
  image: docker:latest
  stage: deploy
  script:
    - echo "Deploying the application"
    - docker pull registry.gitlab.com/binta9619/dl:latest
    - docker run -d -p 80:80 registry.gitlab.com/binta9619/dl:latest
  tags:
   - runner-docker






